<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:DWNavigationPane"
    xmlns:ma="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:maicons="http://metro.mahapps.com/winfx/xaml/iconpacks">

    <Style TargetType="{x:Type local:PaneBadgedButton}">

        <Setter Property="Height" Value="{Binding CompactWidth, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Icon" Value="{x:Static maicons:PackIconFeatherIconsKind.Smile}" />
        <Setter Property="Content" Value="Hello" />
        <Setter Property="ToolTip" Value="{Binding Content, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PaneBadgedButton}">
                    <StackPanel Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" Orientation="Horizontal">
                        <Border Width="{Binding CompactWidth, RelativeSource={RelativeSource TemplatedParent}}">
                            <ma:Badged
                                x:Name="PART_Badge"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Badge="{Binding Badge, RelativeSource={RelativeSource TemplatedParent}}">
                                <ma:Badged.BadgeChangedStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.4" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.8">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <BackEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.4" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0.8">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <BackEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </ma:Badged.BadgeChangedStoryboard>
                                <maicons:PackIconControl
                                    Width="{Binding IconSize, RelativeSource={RelativeSource TemplatedParent}}"
                                    Height="{Binding IconSize, RelativeSource={RelativeSource TemplatedParent}}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Kind="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
                            </ma:Badged>
                        </Border>
                        <ContentPresenter VerticalAlignment="Center" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding IsExtended, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="ToolTipService.IsEnabled" Value="False" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding BackgroundHover, RelativeSource={RelativeSource Self}}" />
                <Setter Property="Foreground" Value="{Binding ForegroundHover, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>