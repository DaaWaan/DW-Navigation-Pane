<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converter="clr-namespace:DWNavigationPane.Converters"
    xmlns:local="clr-namespace:DWNavigationPane">

    <Style x:Key="PaneButtonBase" TargetType="{x:Type ButtonBase}">

        <Style.Resources>
            <ControlTemplate x:Key="Default_Template" TargetType="{x:Type ButtonBase}">
                <StackPanel Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" Orientation="Horizontal">
                    <local:PaneIcon
                        local:Item.Badge="{Binding Path=(local:Item.Badge), RelativeSource={RelativeSource TemplatedParent}}"
                        local:Item.Icon="{Binding Path=(local:Item.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                        local:Item.IsBadged="{Binding Path=(local:Item.IsBadged), RelativeSource={RelativeSource TemplatedParent}}" />
                    <ContentPresenter VerticalAlignment="Center" />
                </StackPanel>
            </ControlTemplate>
            <ControlTemplate x:Key="IsIconOnly_Template" TargetType="{x:Type ButtonBase}">
                <Border Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}">
                    <local:PaneIcon
                        local:Item.Badge="{Binding Path=(local:Item.Badge), RelativeSource={RelativeSource TemplatedParent}}"
                        local:Item.Icon="{Binding Path=(local:Item.Icon), RelativeSource={RelativeSource TemplatedParent}}"
                        local:Item.IsBadged="{Binding Path=(local:Item.IsBadged), RelativeSource={RelativeSource TemplatedParent}}" />
                </Border>
            </ControlTemplate>
        </Style.Resources>

        <Setter Property="Height" Value="{Binding Path=(local:Element.IconContainerSize), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template" Value="{StaticResource Default_Template}" />

        <Style.Triggers>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>

            <DataTrigger Binding="{Binding Path=(local:Element.Background), RelativeSource={RelativeSource Self}, Converter={converter:IsNullConverter}}" Value="False">
                <Setter Property="Background" Value="{Binding Path=(local:Element.Background), RelativeSource={RelativeSource Self}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(local:Element.Foreground), RelativeSource={RelativeSource Self}, Converter={converter:IsNullConverter}}" Value="False">
                <Setter Property="Foreground" Value="{Binding Path=(local:Element.Foreground), RelativeSource={RelativeSource Self}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(local:Element.BackgroundHover), RelativeSource={RelativeSource Self}, Converter={converter:IsNullConverter}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(local:Element.BackgroundHover), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(local:Element.ForegroundHover), RelativeSource={RelativeSource Self}, Converter={converter:IsNullConverter}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Path=(local:Element.ForegroundHover), RelativeSource={RelativeSource Self}}" />
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=(local:Item.IsIconOnly), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Width" Value="{Binding Path=(local:Element.IconContainerSize), RelativeSource={RelativeSource Self}}" />
                <Setter Property="Template" Value="{StaticResource IsIconOnly_Template}" />
            </DataTrigger>

        </Style.Triggers>
    </Style>
</ResourceDictionary>